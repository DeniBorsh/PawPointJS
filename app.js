// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

const { Telegraf, Markup } = require("telegraf");

const sqlite3 = require('sqlite3').verbose();
require('dotenv').config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const MODERS_LIST = [
    +process.env.CONTARO,
    +process.env.BRAKOVAN,
    +process.env.ASKH,
    +process.env.SIGMA,
    +process.env.WIROTENSHI,
    +process.env.GURMAN
];

const db = new sqlite3.Database('./data/database.db', sqlite3.OPEN_READWRITE, (err) => {
    if (err) console.error(err.message);
}); 

db.run(`CREATE TABLE IF NOT EXISTS photos (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    file_id TEXT,
    description TEXT,
    lat REAL,
    lng REAL,
    status TEXT,
    username TEXT
)`);

class ModerationQueue {
    constructor(db) {
        this.db = db;
        this.queue = [];
    }

    async loadQueue() { this.queue = await selectQuery("SELECT id, user_id, file_id, description, lat, lng FROM photos WHERE status = 'new' OR status = 'delayed'", this.db); }
    hasNext() { return this.queue.length > 0; }
    getNext() { return this.queue.shift(); }
}

const moderationQueue = new ModerationQueue(db);
const userStates = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function selectQuery(query, params = []) {
    return new Promise((resolve, reject) => {
        db.all(query, params, (err, rows) => {
            if (err) reject(err);
            else resolve(rows);
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
function runQuery(query, params = []) {
    return new Promise((resolve, reject) => {
        db.run(query, params, function (err) {
            if (err) reject(err);
            else resolve(this);
        });
    });
}

// –°—Ç–∞—Ä—Ç. –ê–¥–º–∏–Ω–∞–º –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏

bot.start((ctx) => {
    const user_id = ctx.from.id;
    if (MODERS_LIST.includes(user_id)) {
        const keyboard = Markup.keyboard([
            ['üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è', 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'],
            ['üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î'] 
        ]).resize();
        ctx.reply(`–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${ctx.from.first_name}!`, keyboard);
    } else {
        ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π —É–ª–∏—á–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ, —Ç–æ —è –∂–¥—É!`);
    }
});

bot.command('moderate', async (ctx) => start_moderation(ctx))
bot.hears('üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è', async (ctx) => start_moderation(ctx));

bot.command('cleanup', async (ctx) => cleanup(ctx));
bot.hears('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', async (ctx) => cleanup(ctx));

bot.command('info', async (ctx) => get_info(ctx));
bot.hears('üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î', async (ctx) => get_info(ctx));

bot.on('photo', async (ctx) => {
    const user_id = ctx.from.id;
    const userState = userStates.get(user_id) || { state: 'await_photo', file_id: null };

    if (userState.state === "await_photo") {
        userState.file_id = ctx.message.photo[0].file_id;
        userState.state = 'await_location';
        userStates.set(user_id, userState);
        ctx.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É–ª–∏—á–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ');
    } else {
        const keyboard = Markup.inlineKeyboard([
            Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancell'),
            Markup.button.callback('‚û°Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç—å', 'finish')
        ]);
        ctx.reply("–£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è. –ñ–µ–ª–∞–µ—Ç–µ –µ–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å?", { reply_markup: keyboard });
    }
});

bot.on('location', async (ctx) => {
    const user_id = ctx.from.id;
    const userState = userStates.get(user_id);

    if (userState && userState.state === 'await_location') {
        try {
            const { latitude: lat, longitude: lng } = ctx.message.location;
            await runQuery("INSERT INTO photos (user_id, file_id, status, username, description, lat, lng) VALUES (?, ?, ?, ?, ?, ?, ?)",
                [user_id, userState.file_id, "edit", "", "", lat, lng]);
            userState.state = 'await_description';
            userStates.set(user_id, userState);

            addDescription(ctx);
        } catch (e) { console.error(e); }
    } else {
        sendStateMessage(ctx);
    }
});

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
function start_moderation(ctx) {
    moderate(ctx);
}

// –§—É–Ω–∫–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
async function moderate(ctx) {
    const user_id = ctx.from.id;
    if (MODERS_LIST.includes(user_id)) {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try {
            if (!moderationQueue.hasNext()) await moderationQueue.loadQueue();
            

            if (moderationQueue.hasNext()) {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç –≤ –æ—á–µ—Ä–µ–¥–∏
                const request = moderationQueue.getNext();
                const request_id = request.id;
                const uid = request.user_id;
                const file_id = request.file_id;
                const description = request.description;
                const lat = request.lat;
                const lng = request.lng;

                // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                const markup = Markup.inlineKeyboard([
                    [
                        Markup.button.callback('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', `accept_${request_id}`),
                        Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${request_id}`),
                        Markup.button.callback('‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å', `delay_${request_id}`)
                    ],
                ]);

                // –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
                const google_maps_url = `https://www.google.com/maps/place/${lat}\,${lng}`;
                const caption = `–ê–≤—Ç–æ—Ä: ${await get_username(uid)}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${description}\n[–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ](${google_maps_url})`;
                ctx.replyWithPhoto(file_id, {
                    caption, parse_mode: 'Markdown', reply_markup: {
                        inline_keyboard: [
                            [{ text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data: `accept_${request_id}` },
                             { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `reject_${request_id}` },
                             { text: "‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å", callback_data: `delay_${request_id}` }]
                        ]
                    }
                });
            } else {
                ctx.reply("–ù–µ—Ç –ø–æ—Å—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏.");
            }
        } catch (err) {
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
        }
    } else {
        ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function cleanup(ctx) {
    const user_id = ctx.from.id;
    if (MODERS_LIST.includes(user_id)) {
        db.run("UPDATE photos SET status = 'deleted' WHERE status = 'edit'");
        ctx.reply('–û—á–∏—Å—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } else {
        ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function get_info(ctx) {
    const user_id = ctx.from.id;
    if (MODERS_LIST.includes(user_id)) {
        try {
            const newPosts = await selectQuery("SELECT COUNT(id) as count FROM photos WHERE status = 'new'");
            const acceptedPosts = await selectQuery("SELECT COUNT(id) as count FROM photos WHERE status = 'accepted'");
            const rejectedPosts = await selectQuery("SELECT COUNT(id) as count FROM photos WHERE status = 'rejected'");
            const delayedPosts = await selectQuery("SELECT COUNT(id) as count FROM photos WHERE status = 'delayed'");
            const editingPosts = await selectQuery("SELECT COUNT(id) as count FROM photos WHERE status = 'edit'");

            ctx.reply(`–ù–æ–≤—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${newPosts[0].count}\n–ü—Ä–∏–Ω—è—Ç—ã–µ: ${acceptedPosts[0].count}\n–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ: ${rejectedPosts[0].count}\n–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ: ${delayedPosts[0].count}\n–ï—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã–µ: ${editingPosts[0].count}`);
        } catch (err) {
            ctx.reply(err);
        }
    } else {
        ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–≤–µ—Ä–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º —à–∞–≥–µ
function sendStateMessage(ctx) {
    const user_id = ctx.from.id;
    const userState = userStates.get(user_id);

    if (!userState || userState.state === 'await_photo') ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —É–ª–∏—á–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ');
    else if (userState.state === 'await_location') ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö');
    else if (userState.state === 'await_description') ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ'); 
    else if (userState.state === 'await_username') ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏');
    else if (userState.state === 'await_urgency') ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
bot.on('text', (ctx) => {
    const user_id = ctx.from.id;
    const userState = userStates.get(user_id);

    if (userState && userState.state === 'await_description') {
        userStates.delete(user_id);
        ctx.reply('–í–∞—à–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é');
    } else {
        sendStateMessage(ctx);
    }
});
function addDescription(ctx) {
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üëÄ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'noDescription')],
    ]);

    bot.telegram.sendMessage(ctx.from.id, "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", {
        reply_markup: {
            inline_keyboard: [
                [{ text: "üëÄ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: "noDescription" }],
            ]
        }
    });
}


// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));