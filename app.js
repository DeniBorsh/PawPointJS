// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

const { Telegraf, Markup } = require("telegraf");

const sqlite3 = require('sqlite3').verbose();
require('dotenv').config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const MODERS_LIST = [
    +process.env.CONTARO,
    +process.env.BRAKOVAN,
    +process.env.ASKH,
    +process.env.SIGMA,
    +process.env.WIROTENSHI,
    +process.env.GURMAN
];

const db = new sqlite3.Database('./data/database.db', sqlite3.OPEN_READWRITE, (err) => {
    if (err) console.error(err.message);
}); 

db.run(`CREATE TABLE IF NOT EXISTS photos (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    file_id TEXT,
    description TEXT,
    lat REAL,
    lng REAL,
    status TEXT,
    username TEXT
)`);

class ModerationQueue {
    constructor() {
        this.queue = [];
    }

    async loadQueue() { this.queue = await selectQuery("SELECT id, user_id, file_id, description, lat, lng FROM photos WHERE status = 'new' OR status = 'delayed'")}
    hasNext() { return this.queue.length > 0; }
    getNext() { return this.queue.shift(); }
}

const moderationQueue = new ModerationQueue();
const userStates = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function selectQuery(query, params = []) {
    return new Promise((resolve, reject) => {
        db.all(query, params, (err, rows) => {
            if (err) {
                console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", query);
                console.error("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:", params);
                console.error("–û—à–∏–±–∫–∞ SQLite:", err);
                reject(err);
            } else {
                console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:", rows);
                resolve(rows);
            }
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
function runQuery(query, params = []) {
    return new Promise((resolve, reject) => {
        db.run(query, params, function (err) {
            if (err) reject(err);
            else resolve(this);
        });
    });
}

// –°—Ç–∞—Ä—Ç. –ê–¥–º–∏–Ω–∞–º –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏

bot.start((ctx) => {
    const user_id = ctx.from.id;
    if (MODERS_LIST.includes(user_id)) {
        const keyboard = Markup.keyboard([
            ['üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è', 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'],
            ['üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î'] 
        ]).resize();
        ctx.reply(`–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${ctx.from.first_name}!`, keyboard);
    } else {
        ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π —É–ª–∏—á–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ, —Ç–æ —è –∂–¥—É!`);
    }
});

bot.command('moderate', async (ctx) => start_moderation(ctx))
bot.hears('üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è', async (ctx) => start_moderation(ctx));

bot.command('cleanup', async (ctx) => cleanup(ctx));
bot.hears('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', async (ctx) => cleanup(ctx));

bot.command('info', async (ctx) => get_info(ctx));
bot.hears('üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î', async (ctx) => get_info(ctx));

bot.on('photo', async (ctx) => {
    const user_id = ctx.from.id;
    const userState = userStates.get(user_id) || {state: 'await_photo', file_id: null };

    if (userState.state === 'await_photo') {
        userState.file_id = ctx.message.photo[0].file_id;
        userState.state = 'await_location';
        userStates.set(user_id, userState);
        ctx.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É–ª–∏—á–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ');
    } else {
        const keyboard = Markup.inlineKeyboard([
            Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancell'),
            Markup.button.callback('‚û°Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç—å', 'complete')
        ]);
        ctx.replyWithPhoto(userState.file_id);
        ctx.reply('–£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è. –ñ–µ–ª–∞–µ—Ç–µ –µ–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å?', { reply_markup: keyboard });
    }
});

bot.on('location', async (ctx) => {
    const user_id = ctx.from.id;
    const userState = userStates.get(user_id);

    if (userState && userState.state === 'await_location') {
        try {
            const { latitude: lat, longitude: lng } = ctx.message.location;
            await runQuery("INSERT INTO photos (user_id, file_id, status, username, description, lat, lng) VALUES (?, ?, ?, ?, ?, ?, ?)",
                [user_id, userState.file_id, "edit", "", "", lat, lng]);
            userState.state = 'await_description';
            userStates.set(user_id, userState);

            addDescription(ctx);
        } catch (e) { console.error(e); }
    } else {
        sendStateMessage(ctx);
    }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
bot.on('text', (ctx) => {
    const user_id = ctx.from.id;
    const userState = userStates.get(user_id);

    if (userState && userState.state === 'await_description') {
        userStates.delete(user_id);
        ctx.reply('–í–∞—à–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é');
    } else {
        sendStateMessage(ctx);
    }
});

bot.on('sticker', (ctx) => sendStateMessage(ctx));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±–µ–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
bot.action('cancell', async (ctx) => {
    const user_id = ctx.from.id;
    const userState = userStates.get(user_id)
    if (userState && ['await_description', 'await_username', 'await_urgency'].includes(userState.state))
        runQuery('DELETE FROM photos WHERE file_id = ?', [userState.id]);
    if (userState) userStates.delete(user_id);
    ctx.reply('–ü—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω–∞. –î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–µ–ª–∏—Ç–µ–ª—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π!');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±–µ–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
bot.action('complete', (ctx) => {
    const user_id = ctx.from.id;
    const userState = userStates.get(user_id)
    if (userState) {
        if (userState.state === 'await_location')
            ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É–ª–∏—á–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ');
        else if (userState.state === 'await_description')
            addDescription(ctx, '–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
        else if (userState.state === 'await_username')
            addUsername(ctx);
        else if (userState.state === 'await_urgency')
            addUrgency(ctx);
    } 
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±–µ–∫–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è
bot.action(/accept_(.+)/, async (ctx) => {
    runQuery('UPDATE photos SET status = ? WHERE id = ?', ['accepted', ctx.match[1]]);
    try {
        const photoInfo = await selectQuery("SELECT file_id, description, lat, lng, username FROM photos WHERE id = ?", [ctx.match[1]]);
        if (photoInfo.length > 0) {
            const { file_id, description, lat, lng, username } = photoInfo[0];
            let caption = "";
            if (username && username.length > 0) {
                caption += `–ê–≤—Ç–æ—Ä: ${username}\n`;
            }
            if (description && description.length > 0) {
                caption += `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–≤—Ç–æ—Ä–∞: ${description}\n`;
            }

            const googleMapsUrl = `https://www.google.com/maps/place/${lat},${lng}`;
            caption += `[–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ](${googleMapsUrl})`;
            
            ctx.replyWithPhoto(file_id, { caption, parse_mode: 'Markdown' });
        }
    } catch (err) {
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
    }
    ctx.reply(`–ó–∞—è–≤–∫–∞ —Å ID ${ctx.match[1]} –æ—Ç–ª–æ–∂–µ–Ω–∞`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±–µ–∫–æ–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
bot.action(/reject_(.+)/, async (ctx) => {
    runQuery('UPDATE photos SET status = ? WHERE id = ?', ['rejected', ctx.match[1]]);
    ctx.reply(`–ó–∞—è–≤–∫–∞ —Å ID ${ctx.match[1]} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±–µ–∫–æ–≤ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–∏—è
bot.action(/delay_(.+)/, async (ctx) => {
    runQuery('UPDATE photos SET status = ? WHERE id = ?', ['delayed', ctx.match[1]]);
    ctx.reply(`–ó–∞—è–≤–∫–∞ —Å ID ${ctx.match[1]} –æ—Ç–ª–æ–∂–µ–Ω–∞`);
});

bot.action('finish', (ctx) => finishPublication(ctx));
bot.action('descriptionNone', (ctx) => addUsername(ctx));
bot.action('usernameNone', (ctx) => addUrgency(ctx));

bot.action('usernameName', async (ctx) => {
    const file_id = userStates.get(ctx.from.id);
    await runQuery('UPDATE photos SET username = ? WHERE file_id = ?', [ctx.from.first_name, file_id]);
    addUrgency(ctx);
});

bot.action('usernameLink', async (ctx) => {
    const file_id = userStates.get(ctx.from.id);
    const username = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;
    await runQuery('UPDATE photos SET username = ? WHERE file_id = ?', [username, file_id]);
    addUrgency(ctx);
});

bot.action('urgent', async (ctx) => {
    finishPublication(ctx);

})

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
function start_moderation(ctx) {
    moderate(ctx);
}

// –§—É–Ω–∫–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
async function moderate(ctx) {
    const admin_id = ctx.from.id;
    if (MODERS_LIST.includes(admin_id)) {
        try {
            if (!moderationQueue.hasNext()) await moderationQueue.loadQueue();

            if (moderationQueue.hasNext()) {
                const request = moderationQueue.getNext();
                const request_id = request.id;
                const user_id = request.user_id;
                const file_id = request.file_id;
                const description = request.description;
                const lat = request.lat;
                const lng = request.lng;
                const google_maps_url = `https://www.google.com/maps/place/${lat}\,${lng}`;
                const caption = `–ê–≤—Ç–æ—Ä: ${await getUsername(user_id)}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${description}\n[–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ](${google_maps_url})`;
               
                ctx.replyWithPhoto(file_id, {
                    caption, parse_mode: 'Markdown', reply_markup: {
                        inline_keyboard: [
                            [{ text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data: `accept_${request_id}` },
                             { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `reject_${request_id}` }],
                             [{ text: "‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å", callback_data: `delay_${request_id}` }]
                        ]
                    }
                });
            } else {
                ctx.reply("–ù–µ—Ç –ø–æ—Å—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏.");
            }
        } catch (err) {
            console.error(err);
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
        }
    } else {
        ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async function cleanup(ctx) {
    const user_id = ctx.from.id;
    if (MODERS_LIST.includes(user_id)) {
        await runQuery("UPDATE photos SET status = 'deleted' WHERE status = 'edit'");
        ctx.reply('–û—á–∏—Å—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } else {
        ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function get_info(ctx) {
    const user_id = ctx.from.id;
    if (MODERS_LIST.includes(user_id)) {
        try {
            const newPosts = await selectQuery("SELECT COUNT(id) as count FROM photos WHERE status = 'new'");
            const acceptedPosts = await selectQuery("SELECT COUNT(id) as count FROM photos WHERE status = 'accepted'");
            const rejectedPosts = await selectQuery("SELECT COUNT(id) as count FROM photos WHERE status = 'rejected'");
            const delayedPosts = await selectQuery("SELECT COUNT(id) as count FROM photos WHERE status = 'delayed'");
            const editingPosts = await selectQuery("SELECT COUNT(id) as count FROM photos WHERE status = 'edit'");

            ctx.reply(`–ù–æ–≤—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${newPosts[0].count}\n–ü—Ä–∏–Ω—è—Ç—ã–µ: ${acceptedPosts[0].count}\n–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ: ${rejectedPosts[0].count}\n–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ: ${delayedPosts[0].count}\n–ï—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã–µ: ${editingPosts[0].count}`);
        } catch (err) {
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    } else {
        ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–≤–µ—Ä–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º —à–∞–≥–µ
function sendStateMessage(ctx) {
    const user_id = ctx.from.id;
    const userState = userStates.get(user_id);

    if (!userState || userState.state === 'await_photo') ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —É–ª–∏—á–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ');
    else if (userState.state === 'await_location') ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö');
    else if (userState.state === 'await_description') addDescription('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ'); 
    else if (userState.state === 'await_username') ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏');
    else if (userState.state === 'await_urgency') ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
}

// –û—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–ª–±–µ–∫-–∫–Ω–æ–ø–∫–∞–º–∏
function addDescription(ctx, message = '–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)') {
    bot.telegram.sendMessage(ctx.from.id, message, {
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üëÄ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'descriptionNone' }],
            ]
        }
    });
}

function addUsername(ctx, message = '–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ–±—ã –≤ –ø–æ—Å—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–æ—Å—å –≤–∞—à–µ –∏–º—è –ª–∏–±–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å?') {
    bot.telegram.sendMessage(ctx.from.id, message, {
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚ùå –ù–µ—Ç', callback_data: 'usernameNone' },
                 { text: 'üóø –ò–º—è', callback_data: 'usernameName' },
                 { text: 'üîó –°—Å—ã–ª–∫–∞', callback_data: 'usernameLink' }],
            ]
        }
    });
}

function addUrgency(ctx, message = '–ï—Å–ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ —Ç—Ä–µ–±—É–µ—Ç —Å—Ä–æ—á–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É') {
    bot.telegram.sendMessage(ctx.from.id, message, {
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data: 'finish' },
                 { text: '‚ùóÔ∏è –°—Ä–æ—á–Ω–æ', callback_data: 'urgent' }]
            ]
        }
    });
}

// –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function finishPublication(ctx) {
    const user_id = ctx.from.id;
    const userState = userStates.get(user_id);
    if (userState) {
        await runQuery('UPDATE photos SET status = ? WHERE file_id = ?', ['new', userState.file_id]);
        ctx.reply('–ü—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
    }
    else ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞');
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è username –∏–∑ id
async function getUsername(userId) {
    try {
        const chat = await bot.telegram.getChat(userId);
        return chat.username ? `@${chat.username}` : ""; chat.first_name;
    } catch (err) {
        return ""; 
    }
}


// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));